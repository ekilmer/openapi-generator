/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"fmt"
)

// EnumHeaderString the model 'EnumHeaderString'
type EnumHeaderString string

// List of enum_header_string
const (
	ENUM_HEADER_STRING_ABC EnumHeaderString = "_abc"
	ENUM_HEADER_STRING_EFG EnumHeaderString = "-efg"
	ENUM_HEADER_STRING_XYZ EnumHeaderString = "(xyz)"
)

var allowedEnumHeaderStringEnumValues = []EnumHeaderString{
	"_abc",
	"-efg",
	"(xyz)",
}

func (v *EnumHeaderString) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumHeaderString(value)
	for _, existing := range allowedEnumHeaderStringEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumHeaderString", value)
}

// NewEnumHeaderStringFromValue returns a pointer to a valid EnumHeaderString
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumHeaderStringFromValue(v string) (*EnumHeaderString, error) {
	ev := EnumHeaderString(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumHeaderString: valid values are %v", v, allowedEnumHeaderStringEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumHeaderString) IsValid() bool {
	for _, existing := range allowedEnumHeaderStringEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to enum_header_string value
func (v EnumHeaderString) Ptr() *EnumHeaderString {
	return &v
}

type NullableEnumHeaderString struct {
	value *EnumHeaderString
	isSet bool
}

func (v NullableEnumHeaderString) Get() *EnumHeaderString {
	return v.value
}

func (v *NullableEnumHeaderString) Set(val *EnumHeaderString) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumHeaderString) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumHeaderString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumHeaderString(val *EnumHeaderString) *NullableEnumHeaderString {
	return &NullableEnumHeaderString{value: val, isSet: true}
}

func (v NullableEnumHeaderString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumHeaderString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

