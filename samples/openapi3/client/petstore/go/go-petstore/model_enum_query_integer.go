/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"fmt"
)

// EnumQueryInteger the model 'EnumQueryInteger'
type EnumQueryInteger int32

// List of enum_query_integer
const (
	ENUM_QUERY_INTEGER__1 EnumQueryInteger = 1
	ENUM_QUERY_INTEGER__MINUS_2 EnumQueryInteger = -2
)

var allowedEnumQueryIntegerEnumValues = []EnumQueryInteger{
	1,
	-2,
}

func (v *EnumQueryInteger) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumQueryInteger(value)
	for _, existing := range allowedEnumQueryIntegerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumQueryInteger", value)
}

// NewEnumQueryIntegerFromValue returns a pointer to a valid EnumQueryInteger
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumQueryIntegerFromValue(v int32) (*EnumQueryInteger, error) {
	ev := EnumQueryInteger(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumQueryInteger: valid values are %v", v, allowedEnumQueryIntegerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumQueryInteger) IsValid() bool {
	for _, existing := range allowedEnumQueryIntegerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to enum_query_integer value
func (v EnumQueryInteger) Ptr() *EnumQueryInteger {
	return &v
}

type NullableEnumQueryInteger struct {
	value *EnumQueryInteger
	isSet bool
}

func (v NullableEnumQueryInteger) Get() *EnumQueryInteger {
	return v.value
}

func (v *NullableEnumQueryInteger) Set(val *EnumQueryInteger) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumQueryInteger) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumQueryInteger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumQueryInteger(val *EnumQueryInteger) *NullableEnumQueryInteger {
	return &NullableEnumQueryInteger{value: val, isSet: true}
}

func (v NullableEnumQueryInteger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumQueryInteger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

