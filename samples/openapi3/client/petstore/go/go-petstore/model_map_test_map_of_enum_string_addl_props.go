/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"fmt"
)

// MapTestMapOfEnumStringAddlProps the model 'MapTestMapOfEnumStringAddlProps'
type MapTestMapOfEnumStringAddlProps string

// List of MapTestMapOfEnumStringAddlProps
const (
	MAP_TEST_MAP_OF_ENUM_STRING_ADDL_PROPS_UPPER MapTestMapOfEnumStringAddlProps = "UPPER"
	MAP_TEST_MAP_OF_ENUM_STRING_ADDL_PROPS_LOWER MapTestMapOfEnumStringAddlProps = "lower"
)

var allowedMapTestMapOfEnumStringAddlPropsEnumValues = []MapTestMapOfEnumStringAddlProps{
	"UPPER",
	"lower",
}

func (v *MapTestMapOfEnumStringAddlProps) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MapTestMapOfEnumStringAddlProps(value)
	for _, existing := range allowedMapTestMapOfEnumStringAddlPropsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MapTestMapOfEnumStringAddlProps", value)
}

// NewMapTestMapOfEnumStringAddlPropsFromValue returns a pointer to a valid MapTestMapOfEnumStringAddlProps
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMapTestMapOfEnumStringAddlPropsFromValue(v string) (*MapTestMapOfEnumStringAddlProps, error) {
	ev := MapTestMapOfEnumStringAddlProps(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MapTestMapOfEnumStringAddlProps: valid values are %v", v, allowedMapTestMapOfEnumStringAddlPropsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MapTestMapOfEnumStringAddlProps) IsValid() bool {
	for _, existing := range allowedMapTestMapOfEnumStringAddlPropsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MapTestMapOfEnumStringAddlProps value
func (v MapTestMapOfEnumStringAddlProps) Ptr() *MapTestMapOfEnumStringAddlProps {
	return &v
}

type NullableMapTestMapOfEnumStringAddlProps struct {
	value *MapTestMapOfEnumStringAddlProps
	isSet bool
}

func (v NullableMapTestMapOfEnumStringAddlProps) Get() *MapTestMapOfEnumStringAddlProps {
	return v.value
}

func (v *NullableMapTestMapOfEnumStringAddlProps) Set(val *MapTestMapOfEnumStringAddlProps) {
	v.value = val
	v.isSet = true
}

func (v NullableMapTestMapOfEnumStringAddlProps) IsSet() bool {
	return v.isSet
}

func (v *NullableMapTestMapOfEnumStringAddlProps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapTestMapOfEnumStringAddlProps(val *MapTestMapOfEnumStringAddlProps) *NullableMapTestMapOfEnumStringAddlProps {
	return &NullableMapTestMapOfEnumStringAddlProps{value: val, isSet: true}
}

func (v NullableMapTestMapOfEnumStringAddlProps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapTestMapOfEnumStringAddlProps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

