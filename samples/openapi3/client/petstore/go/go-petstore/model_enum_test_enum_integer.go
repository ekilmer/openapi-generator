/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"fmt"
)

// EnumTestEnumInteger the model 'EnumTestEnumInteger'
type EnumTestEnumInteger int32

// List of Enum_TestEnumInteger
const (
	ENUM_TEST_ENUM_INTEGER__1 EnumTestEnumInteger = 1
	ENUM_TEST_ENUM_INTEGER__MINUS_1 EnumTestEnumInteger = -1
)

var allowedEnumTestEnumIntegerEnumValues = []EnumTestEnumInteger{
	1,
	-1,
}

func (v *EnumTestEnumInteger) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumTestEnumInteger(value)
	for _, existing := range allowedEnumTestEnumIntegerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumTestEnumInteger", value)
}

// NewEnumTestEnumIntegerFromValue returns a pointer to a valid EnumTestEnumInteger
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumTestEnumIntegerFromValue(v int32) (*EnumTestEnumInteger, error) {
	ev := EnumTestEnumInteger(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumTestEnumInteger: valid values are %v", v, allowedEnumTestEnumIntegerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumTestEnumInteger) IsValid() bool {
	for _, existing := range allowedEnumTestEnumIntegerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum_TestEnumInteger value
func (v EnumTestEnumInteger) Ptr() *EnumTestEnumInteger {
	return &v
}

type NullableEnumTestEnumInteger struct {
	value *EnumTestEnumInteger
	isSet bool
}

func (v NullableEnumTestEnumInteger) Get() *EnumTestEnumInteger {
	return v.value
}

func (v *NullableEnumTestEnumInteger) Set(val *EnumTestEnumInteger) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumTestEnumInteger) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumTestEnumInteger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumTestEnumInteger(val *EnumTestEnumInteger) *NullableEnumTestEnumInteger {
	return &NullableEnumTestEnumInteger{value: val, isSet: true}
}

func (v NullableEnumTestEnumInteger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumTestEnumInteger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

