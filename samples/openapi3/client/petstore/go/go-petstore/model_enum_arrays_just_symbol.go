/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"fmt"
)

// EnumArraysJustSymbol the model 'EnumArraysJustSymbol'
type EnumArraysJustSymbol string

// List of EnumArraysJustSymbol
const (
	ENUM_ARRAYS_JUST_SYMBOL_GREATER_THAN_OR_EQUAL_TO EnumArraysJustSymbol = ">="
	ENUM_ARRAYS_JUST_SYMBOL_DOLLAR EnumArraysJustSymbol = "$"
)

var allowedEnumArraysJustSymbolEnumValues = []EnumArraysJustSymbol{
	">=",
	"$",
}

func (v *EnumArraysJustSymbol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumArraysJustSymbol(value)
	for _, existing := range allowedEnumArraysJustSymbolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumArraysJustSymbol", value)
}

// NewEnumArraysJustSymbolFromValue returns a pointer to a valid EnumArraysJustSymbol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumArraysJustSymbolFromValue(v string) (*EnumArraysJustSymbol, error) {
	ev := EnumArraysJustSymbol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumArraysJustSymbol: valid values are %v", v, allowedEnumArraysJustSymbolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumArraysJustSymbol) IsValid() bool {
	for _, existing := range allowedEnumArraysJustSymbolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumArraysJustSymbol value
func (v EnumArraysJustSymbol) Ptr() *EnumArraysJustSymbol {
	return &v
}

type NullableEnumArraysJustSymbol struct {
	value *EnumArraysJustSymbol
	isSet bool
}

func (v NullableEnumArraysJustSymbol) Get() *EnumArraysJustSymbol {
	return v.value
}

func (v *NullableEnumArraysJustSymbol) Set(val *EnumArraysJustSymbol) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumArraysJustSymbol) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumArraysJustSymbol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumArraysJustSymbol(val *EnumArraysJustSymbol) *NullableEnumArraysJustSymbol {
	return &NullableEnumArraysJustSymbol{value: val, isSet: true}
}

func (v NullableEnumArraysJustSymbol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumArraysJustSymbol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

