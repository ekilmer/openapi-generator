/*
OpenAPI Petstore

This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package petstore

import (
	"encoding/json"
	"fmt"
)

// BigCatAllOfKind the model 'BigCatAllOfKind'
type BigCatAllOfKind string

// List of BigCatAllOfKind
const (
	LIONS BigCatAllOfKind = "lions"
	TIGERS BigCatAllOfKind = "tigers"
	LEOPARDS BigCatAllOfKind = "leopards"
	JAGUARS BigCatAllOfKind = "jaguars"
)

var allowedBigCatAllOfKindEnumValues = []BigCatAllOfKind{
	"lions",
	"tigers",
	"leopards",
	"jaguars",
}

func (v *BigCatAllOfKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BigCatAllOfKind(value)
	for _, existing := range allowedBigCatAllOfKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BigCatAllOfKind", value)
}

// NewBigCatAllOfKindFromValue returns a pointer to a valid BigCatAllOfKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBigCatAllOfKindFromValue(v string) (*BigCatAllOfKind, error) {
	ev := BigCatAllOfKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BigCatAllOfKind: valid values are %v", v, allowedBigCatAllOfKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BigCatAllOfKind) IsValid() bool {
	for _, existing := range allowedBigCatAllOfKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BigCatAllOfKind value
func (v BigCatAllOfKind) Ptr() *BigCatAllOfKind {
	return &v
}

type NullableBigCatAllOfKind struct {
	value *BigCatAllOfKind
	isSet bool
}

func (v NullableBigCatAllOfKind) Get() *BigCatAllOfKind {
	return v.value
}

func (v *NullableBigCatAllOfKind) Set(val *BigCatAllOfKind) {
	v.value = val
	v.isSet = true
}

func (v NullableBigCatAllOfKind) IsSet() bool {
	return v.isSet
}

func (v *NullableBigCatAllOfKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBigCatAllOfKind(val *BigCatAllOfKind) *NullableBigCatAllOfKind {
	return &NullableBigCatAllOfKind{value: val, isSet: true}
}

func (v NullableBigCatAllOfKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBigCatAllOfKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

